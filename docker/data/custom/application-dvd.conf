flags {
    enableCount = false
    enableCount = ${?ENABLE_COUNT}
    enableGenerateData = false
    enableGenerateData = ${?ENABLE_GENERATE_DATA}
    enableGeneratePlanAndTasks = true
    enableGeneratePlanAndTasks = ${?ENABLE_GENERATE_PLAN_AND_TASKS}
    enableRecordTracking = false
    enableRecordTracking = ${?ENABLE_RECORD_TRACKING}
    enableDeleteGeneratedRecords = false
    enableDeleteGeneratedRecords = ${?ENABLE_DELETE_GENERATED_RECORDS}
    enableFailOnError = false
    enableFailOnError = ${?ENABLE_FAIL_ON_ERROR}
}

folders {
    generatedPlanAndTaskFolderPath = "/opt/app/custom/generated"
    generatedPlanAndTaskFolderPath = ${?GENERATED_PLAN_AND_TASK_FOLDER_PATH}
    planFilePath = "/opt/app/custom/generated/plan/postgres-plan.yaml"
    planFilePath = ${?PLAN_FILE_PATH}
    taskFolderPath = "/opt/app/custom/generated/task"
    taskFolderPath = ${?TASK_FOLDER_PATH}
    recordTrackingFolderPath = "/opt/app/custom/recordTracking"
    recordTrackingFolderPath = ${?RECORD_TRACKING_FOLDER_PATH}
    generatedDataResultsFolderPath = "/opt/app/custom/report/dvd"
    generatedDataResultsFolderPath = ${?GENERATED_DATA_METADATA_FOLDER_PATH}
}

metadata {
    numRecordsFromDataSource = 10000
    numRecordsForAnalysis = 10000
    oneOfDistinctCountVsCountThreshold = 0.1
}

generation {}

spark {
    master = "local[*]"
    master = ${?SPARK_MASTER}
    config {
        "spark.sql.cbo.enabled" = "true"
        "spark.sql.adaptive.enabled" = "true"
        "spark.sql.cbo.planStats.enabled" = "true"
        "spark.sql.legacy.allowUntypedScalaUDF" = "true"
        "spark.sql.statistics.histogram.enabled" = "true"
        "spark.sql.shuffle.partitions" = "10"
        "spark.sql.catalog.postgres" = ""
        "spark.sql.catalog.cassandra" = "com.datastax.spark.connector.datasource.CassandraCatalog"
        "spark.hadoop.fs.s3a.directory.marker.retention" = "keep"
        "spark.hadoop.fs.s3a.bucket.all.committer.magic.enabled" = "true"
    }
}

jdbc {
    postgresDvd {
        url = "jdbc:postgresql://postgresdvdserver:5432/dvdrental"
        url = ${?POSTGRES_URL}
        user = "postgres"
        user = ${?POSTGRES_USER}
        password = "postgres"
        password = ${?POSTGRES_PASSWORD}
        driver = "org.postgresql.Driver"
    }
}
