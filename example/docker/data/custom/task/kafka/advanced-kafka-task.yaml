name: "advanced_kafka_task"
description: "Comprehensive Kafka data generation with headers, partitioning, and nested structures"
steps:
  - name: "customer_events_stream"
    type: "kafka"
    options:
      topic: "customer-events"
    count:
      records: 2000
    fields:
      # Kafka message metadata
      - name: "key"
        type: "string"
        options:
          sql: "body.customer_id"
      - name: "partition"
        type: "integer"
        options:
          min: 0
          max: 3
      - name: "headers"
        type: "map<string, string>"
        fields:
          - name: "event-type"
            type: "string"
            options:
              sql: "body.event_type"
          - name: "customer-id"
            type: "string"
            options:
              sql: "body.customer_id"
          - name: "timestamp"
            type: "string"
            options:
              sql: "CAST(body.event_timestamp AS STRING)"
          - name: "source-system"
            type: "string"
            options:
              oneOf: ["web-app", "mobile-app", "admin-portal"]
      # Message body with complex nested structure
      - name: "body"
        type: "struct"
        fields:
          - name: "customer_id"
            type: "string"
            options:
              regex: "CUST[0-9]{8}"
          - name: "event_id"
            type: "string"
            options:
              regex: "EVT[0-9]{12}"
              isUnique: true
          - name: "event_timestamp"
            type: "timestamp"
            options:
              min: "2023-01-01 00:00:00"
              max: "2023-12-31 23:59:59"
          - name: "event_type"
            type: "string"
            options:
              oneOf: ["user_registration", "order_placed", "payment_processed", "order_shipped", "order_delivered"]
          - name: "customer_profile"
            type: "struct"
            fields:
              - name: "name"
                type: "string"
                options:
                  expression: "#{Name.name}"
              - name: "email"
                type: "string"
                options:
                  expression: "#{Internet.emailAddress}"
              - name: "age"
                type: "integer"
                options:
                  min: 18
                  max: 80
              - name: "location"
                type: "struct"
                fields:
                  - name: "country"
                    type: "string"
                    options:
                      expression: "#{Address.country}"
                  - name: "city"
                    type: "string"
                    options:
                      expression: "#{Address.city}"
                  - name: "postal_code"
                    type: "string"
                    options:
                      expression: "#{Address.zipCode}"
          - name: "order_details"
            type: "struct"
            options:
              enableNull: true
              nullProb: 0.2
            fields:
              - name: "order_id"
                type: "string"
                options:
                  regex: "ORD[0-9]{10}"
              - name: "total_amount"
                type: "double"
                options:
                  min: 10.0
                  max: 500.0
              - name: "currency"
                type: "string"
                options:
                  oneOf: ["USD", "EUR", "GBP", "AUD"]
              - name: "items"
                type: "array<struct<product_id: string, quantity: integer, price: double>>"
                options:
                  arrayMinLength: 1
                  arrayMaxLength: 5
                fields:
                  - name: "product_id"
                    type: "string"
                    options:
                      regex: "PROD[0-9]{6}"
                  - name: "quantity"
                    type: "integer"
                    options:
                      min: 1
                      max: 10
                  - name: "price"
                    type: "double"
                    options:
                      min: 5.0
                      max: 100.0
              - name: "total_items"
                type: "integer"
                options:
                  sql: "SIZE(order_details.items)"
              - name: "calculated_total"
                type: "double"
                options:
                  sql: "aggregate(order_details.items, 0.0, (acc, item) -> acc + (item.quantity * item.price))"
          - name: "metadata"
            type: "struct"
            fields:
              - name: "source_system"
                type: "string"
                options:
                  sql: "headers['source-system']"
              - name: "processed_at"
                type: "timestamp"
                options:
                  sql: "event_timestamp + INTERVAL 5 SECOND"
              - name: "event_date"
                type: "date"
                options:
                  sql: "DATE(event_timestamp)"
              - name: "hour_of_day"
                type: "integer"
                options:
                  sql: "HOUR(event_timestamp)"
    validations:
      - field: "body.customer_id"
        isNull: false
      - field: "body.event_id"
        isNull: false
      - expr: "SIZE(body.order_details.items) > 0 OR body.order_details IS NULL"
        description: "Order should have items when order details exist"
      - expr: "ABS(body.order_details.calculated_total - body.order_details.total_amount) < 0.01 OR body.order_details IS NULL"
        description: "Calculated total should match order total amount"