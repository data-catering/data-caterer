/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Scala application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */
plugins {
    scala
    application

    alias(libs.plugins.scoverage) apply false
    alias(libs.plugins.shadow)
}

// Check if configuration cache is enabled
val isConfigCacheEnabled = providers.gradleProperty("org.gradle.configuration-cache")
    .map { it.toBoolean() }.getOrElse(false)

// Conditionally apply Scoverage plugin when configuration cache is disabled
if (!isConfigCacheEnabled) {
    apply(plugin = "org.scoverage")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        url = uri("https://plugins.gradle.org/m2/")
    }
}

val basicImpl: Configuration by configurations.creating
val jpackageDep: Configuration by configurations.creating

configurations {
    compileOnly {
        if (System.getenv("JPACKAGE_BUILD") != "true") {
            extendsFrom(jpackageDep)
        }
    }
    implementation {
        extendsFrom(basicImpl)
        if (System.getenv("JPACKAGE_BUILD") == "true") {
            extendsFrom(jpackageDep)
        }
    }
}

dependencies {
    basicImpl(project(":api"))
    basicImpl(libs.scala.library)
    basicImpl(libs.spark.sql) {
        exclude(group = "com.google.protobuf")
        exclude(module = "aircompressor")
        exclude(module = "avro")
        exclude(module = "commons-compress")
        exclude(module = "commons-configuration2")
        exclude(module = "commons-io")
        exclude(module = "commons-net")
        exclude(module = "guava")
        exclude(module = "ion-java")
        exclude(module = "ivy")
        exclude(module = "jetty-client")
        exclude(module = "jetty-http")
        exclude(module = "jetty-io")
        exclude(module = "jetty-util")
        exclude(module = "jetty-webapp")
        exclude(module = "jetty-xml")
        exclude(module = "json-smart")
        exclude(module = "kerb-admin")
        exclude(module = "netty-codec-http")
        exclude(module = "netty-codec-http2")
        exclude(module = "netty-handler")
        exclude(module = "nimbus-jose-jwt")
        exclude(module = "protobuf-java")
        exclude(module = "snappy-java")
        exclude(module = "wildfly-openssl")
        exclude(module = "wildfly-openssl-java")
        exclude(module = "woodstox-core")
        exclude(module = "xnio-api")
        exclude(module = "zookeeper")
    }

    // vulnerabilities in Spark
//    basicImpl("com.google.protobuf:protobuf-java:3.25.5") fails with https://github.com/protostuff/protostuff/issues/367
    basicImpl(libs.bundles.security.updates)
    basicImpl("io.netty:netty-tcnative-boringssl-static:2.0.65.Final:windows-x86_64")
    basicImpl("io.netty:netty-tcnative-boringssl-static:2.0.65.Final:osx-x86_64")
    basicImpl("io.netty:netty-tcnative-boringssl-static:2.0.65.Final:linux-x86_64")
    basicImpl(libs.bundles.commons)
    basicImpl(libs.json.smart)
    basicImpl(libs.avro)
    basicImpl(libs.jettison)
    basicImpl(libs.bundles.jetty)
    basicImpl(libs.kerby.admin)
    basicImpl(libs.wildfly.openssl)
    basicImpl(libs.wildfly.openssl.java)
    basicImpl(libs.xnio.api)
    basicImpl(libs.aircompressor)
    basicImpl(libs.zookeeper)
//    basicImpl("dnsjava:dnsjava:3.6.2")
    basicImpl(libs.amazon.ion)
    basicImpl(libs.ivy)
    basicImpl(libs.snappy)
    //basicImpl("software.amazon.ion:ion-java:1.5.1") //should use: basicImpl("com.amazon.ion:ion-java:1.11.8")

    // additional spark
    basicImpl(libs.spark.avro) {
        exclude(group = "org.scala-lang")
        exclude(group = "com.google.protobuf")
    }
    basicImpl(libs.spark.protobuf) {
        exclude(group = "org.scala-lang")
        exclude(group = "com.google.protobuf")
    }

    // connectors
    basicImpl(libs.bundles.databases)
    basicImpl(libs.cassandra.connector) {
        exclude(group = "org.scala-lang")
    }
    // bigquery
    basicImpl(libs.spark.mllib) {
        exclude(group = "org.scala-lang")
    }
    basicImpl(libs.bigquery.connector) {
        exclude(group = "org.scala-lang")
    }
    // cloud file storage
    basicImpl(libs.spark.hadoop.cloud) {
        exclude(group = "org.scala-lang")
        exclude(module = "jackson-mapper-asl")
    }
    // file formats
    basicImpl(libs.iceberg.spark) {
        exclude(group = "org.scala-lang")
    }
    basicImpl(libs.delta.spark) {
        exclude(group = "org.scala-lang")
    }

    // http
    basicImpl(libs.async.http.client)
    basicImpl(libs.swagger.parser)
    // kafka
    basicImpl(libs.spark.sql.kafka) {
        exclude(group = "org.scala-lang")
    }
    // jms
    basicImpl(libs.bundles.jms)
    // open metadata
    basicImpl(libs.openmetadata.client) {
        exclude(group = "org.antlr")
        exclude(module = "logback-core")
        exclude(module = "logback-classic")
    }
    // protobuf
    basicImpl(libs.protostuff.parser)

    // data generation helpers
    basicImpl(libs.bundles.utilities)

    // alert
    basicImpl(libs.slack.api.client)

    // UI/HTTP server
    basicImpl(libs.bundles.pekko)

    // needed to work on Windows
    basicImpl(libs.hadoop.bare.naked)

    // json schema validation
    basicImpl(libs.json.schema.validator)

    // misc
    basicImpl(libs.pureconfig) {
        exclude(group = "org.scala-lang")
    }
    basicImpl(libs.jackson.databind) {
        version {
            strictly("2.15.3")
        }
    }
    basicImpl(libs.jackson.dataformat.yaml.strict) {
        version {
            strictly("2.15.3")
        }
    }
    basicImpl(libs.jackson.module.scala.strict) {
        version {
            strictly("2.15.3")
        }
        exclude(group = "org.scala-lang")
    }
    basicImpl(libs.jackson.datatype.jsr310) {
        version {
            strictly("2.15.3")
        }
    }
    basicImpl(libs.jackson.datatype.joda) {
        version {
            strictly("2.15.3")
        }
    }
    //NoClassDefFoundError: shaded/parquet/com/fasterxml/jackson/databind/ObjectMapper
    basicImpl(libs.parquet.jackson)  //new versions contain transitive deps that use java 21, shadowJar fails
    basicImpl(libs.scala.xml.full) {
        exclude(group = "org.scala-lang")
    }

    // Test dependencies
    testImplementation(libs.bundles.test)
    testImplementation(libs.mockito.scala)
    testImplementation(libs.spark.sql)
    testImplementation(libs.spark.avro)
    testImplementation(libs.spark.protobuf)
    testImplementation(libs.testcontainers.scala)
    testImplementation(libs.pekko.actor.testkit)
    testImplementation(project(":api"))

    // Need scala-xml at test runtime
    testRuntimeOnly(libs.bundles.test.runtime)
}

tasks.test {
    // Performance optimizations
    maxParallelForks = Runtime.getRuntime().availableProcessors().div(2).coerceAtLeast(1)
    forkEvery = 50 // Restart test JVM every 50 tests to avoid memory issues
    minHeapSize = "512m"
    maxHeapSize = "2048m"
    
    jvmArgs("-Djava.security.manager=allow", "-Djdk.module.illegalAccess=deny", "--add-opens=java.base/java.lang=ALL-UNNAMED", "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED", "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED", "--add-opens=java.base/java.io=ALL-UNNAMED", "--add-opens=java.base/java.net=ALL-UNNAMED", "--add-opens=java.base/java.nio=ALL-UNNAMED", "--add-opens=java.base/java.util=ALL-UNNAMED", "--add-opens=java.base/java.util.concurrent=ALL-UNNAMED", "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED", "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED", "--add-opens=java.base/sun.nio.cs=ALL-UNNAMED", "--add-opens=java.base/sun.security.action=ALL-UNNAMED", "--add-opens=java.base/sun.util.calendar=ALL-UNNAMED", "--add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED")
    
    // Only finalize with Scoverage report when configuration cache is disabled
    if (!isConfigCacheEnabled) {
        finalizedBy(tasks.named("reportScoverage"))
    }
    useJUnitPlatform {
        includeEngines("scalatest")
        testLogging {
            events("failed", "skipped")
            showStandardStreams = false
        }
    }
    // Enable proper test filtering
    filter {
        setFailOnNoMatchingTests(false)
        // Exclude integration tests from regular test run
        excludeTestsMatching("io.github.datacatering.datacaterer.core.ui.plan.PlanApiEndToEndTest")
    }
}

// Integration test task
tasks.register<Test>("integrationTest") {
    description = "Runs integration tests including PlanApiEndToEndTest"
    group = "verification"

    testClassesDirs = sourceSets["integrationTest"].output.classesDirs
    classpath = sourceSets["integrationTest"].runtimeClasspath

    // Same JVM settings as regular tests but allow more memory for integration tests
    minHeapSize = "1024m"
    maxHeapSize = "4096m"

    jvmArgs("-Djava.security.manager=allow", "-Djdk.module.illegalAccess=deny", "--add-opens=java.base/java.lang=ALL-UNNAMED", "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED", "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED", "--add-opens=java.base/java.io=ALL-UNNAMED", "--add-opens=java.base/java.net=ALL-UNNAMED", "--add-opens=java.base/java.nio=ALL-UNNAMED", "--add-opens=java.base/java.util=ALL-UNNAMED", "--add-opens=java.base/java.util.concurrent=ALL-UNNAMED", "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED", "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED", "--add-opens=java.base/sun.nio.cs=ALL-UNNAMED", "--add-opens=java.base/sun.security.action=ALL-UNNAMED", "--add-opens=java.base/sun.util.calendar=ALL-UNNAMED", "--add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED")

    useJUnitPlatform {
        includeEngines("scalatest")
        testLogging {
            events("passed", "failed", "skipped")
            showStandardStreams = true // Show output for integration tests
        }
    }

    // Integration tests should run sequentially to avoid conflicts
    maxParallelForks = 1

    // Fork a new JVM for each test class to isolate state (actors, system properties, Spark sessions)
    // This is necessary because integration tests like PlanApiEndToEndTest modify global state
    forkEvery = 1

    // Enable proper test filtering
    filter {
        setFailOnNoMatchingTests(false)
    }

    mustRunAfter("test")
}

// Performance test task
tasks.register<Test>("performanceTest") {
    description = "Runs performance tests (DataGeneratorFactoryPerformanceTest, ForeignKeyUtilPerformanceTest)"
    group = "verification"

    testClassesDirs = sourceSets["performanceTest"].output.classesDirs
    classpath = sourceSets["performanceTest"].runtimeClasspath

    // Allow more memory and time for performance tests
    minHeapSize = "2048m"
    maxHeapSize = "8192m"

    jvmArgs("-Djava.security.manager=allow", "-Djdk.module.illegalAccess=deny", "--add-opens=java.base/java.lang=ALL-UNNAMED", "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED", "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED", "--add-opens=java.base/java.io=ALL-UNNAMED", "--add-opens=java.base/java.net=ALL-UNNAMED", "--add-opens=java.base/java.nio=ALL-UNNAMED", "--add-opens=java.base/java.util=ALL-UNNAMED", "--add-opens=java.base/java.util.concurrent=ALL-UNNAMED", "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED", "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED", "--add-opens=java.base/sun.nio.cs=ALL-UNNAMED", "--add-opens=java.base/sun.security.action=ALL-UNNAMED", "--add-opens=java.base/sun.util.calendar=ALL-UNNAMED", "--add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED")

    useJUnitPlatform {
        includeEngines("scalatest")
        testLogging {
            events("passed", "failed", "skipped")
            showStandardStreams = true // Show output for performance tests
        }
    }

    // Performance tests should run sequentially to get accurate measurements
    maxParallelForks = 1

    // Enable proper test filtering
    filter {
        setFailOnNoMatchingTests(false)
    }

    mustRunAfter("test")
}

application {
    // Define the main class for the application.
    mainClass.set("io.github.datacatering.datacaterer.App")
}

// Custom run tasks for different modes
tasks.register<JavaExec>("runUI") {
    group = "application"
    description = "Run Data Caterer UI (standalone mode)"
    classpath = sourceSets.main.get().runtimeClasspath
    mainClass.set("io.github.datacatering.datacaterer.core.ui.DataCatererUI")

    // Set environment variables for YAML plan and task paths (absolute paths)
    val projectDir = project.projectDir.absolutePath
    val rootProjectDir = project.rootProject.projectDir.absolutePath
    environment("PLAN_FILE_PATH", "$rootProjectDir/app/src/test/resources/sample/plan/customer-create-plan.yaml")
    environment("TASK_FOLDER_PATH", "$rootProjectDir/app/src/test/resources/sample/task")
    environment("GENERATED_REPORTS_FOLDER_PATH", "/tmp/data-caterer/report")
    environment("LOG_LEVEL", "debug")

    // Set working directory to project root to help with relative path resolution
    workingDir(rootProjectDir)

    // Build list of JVM arguments
    val jvmArgsList = mutableListOf(
        "-Djava.security.manager=allow",
        "-Djdk.module.illegalAccess=deny",
        "--add-opens=java.base/java.lang=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-opens=java.base/java.io=ALL-UNNAMED",
        "--add-opens=java.base/java.net=ALL-UNNAMED",
        "--add-opens=java.base/java.nio=ALL-UNNAMED",
        "--add-opens=java.base/java.util=ALL-UNNAMED",
        "--add-opens=java.base/java.util.concurrent=ALL-UNNAMED",
        "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
        "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
        "--add-opens=java.base/sun.nio.cs=ALL-UNNAMED",
        "--add-opens=java.base/sun.security.action=ALL-UNNAMED",
        "--add-opens=java.base/sun.util.calendar=ALL-UNNAMED",
        "--add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED"
    )


    jvmArgs(jvmArgsList)
}

tasks.register<JavaExec>("runSpark") {
    group = "application"
    description = "Run Data Caterer as Spark job"
    classpath = sourceSets.main.get().runtimeClasspath
    mainClass.set("io.github.datacatering.datacaterer.App")
    
    // Add JVM arguments similar to docker script
    jvmArgs(
        "-Djava.security.manager=allow",
        "-Djdk.module.illegalAccess=deny",
        "--add-opens=java.base/java.lang=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-opens=java.base/java.io=ALL-UNNAMED",
        "--add-opens=java.base/java.net=ALL-UNNAMED",
        "--add-opens=java.base/java.nio=ALL-UNNAMED",
        "--add-opens=java.base/java.util=ALL-UNNAMED",
        "--add-opens=java.base/java.util.concurrent=ALL-UNNAMED",
        "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
        "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
        "--add-opens=java.base/sun.nio.cs=ALL-UNNAMED",
        "--add-opens=java.base/sun.security.action=ALL-UNNAMED",
        "--add-opens=java.base/sun.util.calendar=ALL-UNNAMED",
        "--add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED"
    )
}

sourceSets {
    test {
        resources {
            setSrcDirs(listOf("src/test/resources"))
        }
    }

    // Integration test source set
    create("integrationTest") {
        compileClasspath += sourceSets.main.get().output
        runtimeClasspath += sourceSets.main.get().output
        compileClasspath += sourceSets.test.get().output
        runtimeClasspath += sourceSets.test.get().output
        resources {
            setSrcDirs(listOf("src/test/resources")) // Reuse test resources
        }
    }

    // Performance test source set
    create("performanceTest") {
        compileClasspath += sourceSets.main.get().output
        runtimeClasspath += sourceSets.main.get().output
        compileClasspath += sourceSets.test.get().output
        runtimeClasspath += sourceSets.test.get().output
        resources {
            setSrcDirs(listOf("src/test/resources")) // Reuse test resources
        }
    }
}

// Configure integration test configurations after source sets are created
configurations {
    named("integrationTestImplementation") {
        extendsFrom(testImplementation.get())
    }
    named("integrationTestRuntimeOnly") {
        extendsFrom(testRuntimeOnly.get())
    }
    named("performanceTestImplementation") {
        extendsFrom(testImplementation.get())
    }
    named("performanceTestRuntimeOnly") {
        extendsFrom(testRuntimeOnly.get())
    }
}

tasks.jar {
    manifest {
        archiveFileName.set("data-caterer-slim.jar")
    }
}

tasks.shadowJar {
    archiveFileName.set("data-caterer.jar")
    isZip64 = true
    relocate("com.google.common", "shadow.com.google.common")
    val newTransformer = com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer()
    newTransformer.resource = "reference.conf"
    transformers.add(newTransformer)
}

// Configure Scoverage only when it's applied (configuration cache disabled)
if (!isConfigCacheEnabled) {
    configure<org.scoverage.ScoverageExtension> {
        scoverageScalaVersion.set("2.12.15")
        excludedFiles.add(".*CombinationCalculator.*")
        excludedPackages.add("io.github.datacatering.datacaterer.core.exception.*")
    }
}
