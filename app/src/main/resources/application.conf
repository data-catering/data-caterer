flags {
    enableCount = true
    enableCount = ${?ENABLE_COUNT}
    enableGenerateData = true
    enableGenerateData = ${?ENABLE_GENERATE_DATA}
    enableGeneratePlanAndTasks = false
    enableGeneratePlanAndTasks = ${?ENABLE_GENERATE_PLAN_AND_TASKS}
    enableRecordTracking = false
    enableRecordTracking = ${?ENABLE_RECORD_TRACKING}
    enableDeleteGeneratedRecords = false
    enableDeleteGeneratedRecords = ${?ENABLE_DELETE_GENERATED_RECORDS}
    enableFailOnError = true
    enableFailOnError = ${?ENABLE_FAIL_ON_ERROR}
    enableUniqueCheck = true
    enableUniqueCheck = ${?ENABLE_UNIQUE_CHECK}
    enableSinkMetadata = true
    enableSinkMetadata = ${?ENABLE_SINK_METADATA}
    enableSaveReports = true
    enableSaveReports = ${?ENABLE_SAVE_REPORTS}
    enableValidation = false
    enableValidation = ${?ENABLE_VALIDATION}
    enableGenerateValidations = false
    enableGenerateValidations = ${?ENABLE_GENERATE_VALIDATIONS}
    enableAlerts = false
    enableAlerts = ${?ENABLE_ALERTS}
}

folders {
    generatedPlanAndTaskFolderPath = "/tmp"
    generatedPlanAndTaskFolderPath = ${?GENERATED_PLAN_AND_TASK_FOLDER_PATH}
    planFilePath = "app/src/test/resources/sample/plan/customer-create-plan.yaml"
    planFilePath = ${?PLAN_FILE_PATH}
    taskFolderPath = "app/src/test/resources/sample/task"
    taskFolderPath = ${?TASK_FOLDER_PATH}
    validationFolderPath = "app/src/test/resources/sample/validation"
    validationFolderPath = ${?VALIDATION_FOLDER_PATH}
    recordTrackingFolderPath = "/tmp/data/generated/recordTracking"
    recordTrackingFolderPath = ${?RECORD_TRACKING_FOLDER_PATH}
    recordTrackingForValidationFolderPath = "/tmp/data/validation/recordTracking"
    recordTrackingForValidationFolderPath = ${?RECORD_TRACKING_VALIDATION_FOLDER_PATH}
    generatedReportsFolderPath = "app/src/test/resources/sample/html"
    generatedReportsFolderPath = ${?GENERATED_REPORTS_FOLDER_PATH}
}

metadata {
    numRecordsFromDataSource = 10000
    numRecordsFromDataSource = ${?NUM_RECORDS_FROM_DATA_SOURCE}
    numRecordsForAnalysis = 10000
    numRecordsForAnalysis = ${?NUM_RECORDS_FOR_ANALYSIS}
    oneOfDistinctCountVsCountThreshold = 0.1
    oneOfDistinctCountVsCountThreshold = ${?ONE_OF_DISTINCT_COUNT_VS_COUNT_THRESHOLD}
    oneOfMinCount = 1000
    oneOfMinCount = ${?ONE_OF_MIN_COUNT}
    numGeneratedSamples = 10
    numGeneratedSamples = ${?NUM_GENERATED_SAMPLES}
}

generation {
    numRecordsPerBatch = 1000000
    numRecordsPerBatch = ${?NUM_RECORDS_PER_BATCH}
}

validation {
    numSampleErrorRecords = 5
    numSampleErrorRecords = ${?NUM_SAMPLE_ERROR_RECORDS}
    enableDeleteRecordTrackingFiles = true
    enableDeleteRecordTrackingFiles = ${?ENABLE_DELETE_RECORD_TRACKING_FILES}
}

alert {
    triggerOn = "all"
    triggerOn = ${?ALERT_TRIGGER_ON}
    slackAlertConfig {
        token = ""
        token = ${?ALERT_SLACK_TOKEN}
        channels = []
        channels = ${?ALERT_SLACK_CHANNELS}
    }
}

runtime {
    master = "local[*]"
    master = ${?DATA_CATERER_MASTER}
    config {
        "spark.sql.cbo.enabled" = "true",
        "spark.sql.adaptive.enabled" = "true",
        "spark.sql.cbo.planStats.enabled" = "true",
        "spark.sql.legacy.allowUntypedScalaUDF" = "true",
        "spark.sql.legacy.allowParameterlessCount" = "true",
        "spark.sql.statistics.histogram.enabled" = "true",
        "spark.sql.shuffle.partitions" = "10",
        "spark.sql.catalog.postgres" = "",
        "spark.sql.catalog.cassandra" = "com.datastax.spark.connector.datasource.CassandraCatalog",
        "spark.sql.catalog.iceberg" = "org.apache.iceberg.spark.SparkCatalog",
        "spark.sql.catalog.iceberg.type" = "hadoop",
        "spark.hadoop.fs.s3a.directory.marker.retention" = "keep",
        "spark.hadoop.fs.s3a.bucket.all.committer.magic.enabled" = "true",
        "spark.hadoop.fs.hdfs.impl" = "org.apache.hadoop.hdfs.DistributedFileSystem",
        "spark.hadoop.fs.file.impl" = "com.globalmentor.apache.hadoop.fs.BareLocalFileSystem",
        "spark.sql.extensions" = "io.delta.sql.DeltaSparkSessionExtension,org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions"
    }
}

json {
    json {
    }
}

csv {
    csv {
    }
}

delta {
    delta {
    }
}

iceberg {
    iceberg {
    }
}

orc {
    orc {
    }
}

parquet {
    parquet {
    }
}

jdbc {
    postgres {
        url = "jdbc:postgresql://localhost:5432/customer"
        url = ${?POSTGRES_URL}
        user = "postgres"
        user = ${?POSTGRES_USER}
        password = "postgres"
        password = ${?POSTGRES_PASSWORD}
        driver = "org.postgresql.Driver"
    }
    mysql {
        url = "jdbc:mysql://localhost:3306/customer"
        url = ${?MYSQL_URL}
        user = "root"
        user = ${?MYSQL_USERNAME}
        password = "root"
        password = ${?MYSQL_PASSWORD}
        driver = "com.mysql.cj.jdbc.Driver"
    }
}


org.apache.spark.sql.cassandra {
    cassandra {
        spark.cassandra.connection.host = "localhost"
        spark.cassandra.connection.host = ${?CASSANDRA_HOST}
        spark.cassandra.connection.port = "9042"
        spark.cassandra.connection.port = ${?CASSANDRA_PORT}
        spark.cassandra.auth.username = "cassandra"
        spark.cassandra.auth.username = ${?CASSANDRA_USERNAME}
        spark.cassandra.auth.password = "cassandra"
        spark.cassandra.auth.password = ${?CASSANDRA_PASSWORD}
    }
}

bigquery {
    bigquery {
    }
}

http {
    http {
    }
}

jms {
    solace {
        initialContextFactory = "com.solacesystems.jndi.SolJNDIInitialContextFactory"
        initialContextFactory = ${?SOLACE_INITIAL_CONTEXT_FACTORY}
        connectionFactory = "/jms/cf/default"
        connectionFactory = ${?SOLACE_CONNECTION_FACTORY}
        url = "smf://localhost:55554"
        url = ${?SOLACE_URL}
        user = "admin"
        user = ${?SOLACE_USER}
        password = "admin"
        password = ${?SOLACE_PASSWORD}
        vpnName = "default"
        vpnName = ${?SOLACE_VPN}
    }
    rabbitmq {
        connectionFactory = "com.rabbitmq.jms.admin.RMQConnectionFactory"
        connectionFactory = ${?RABBITMQ_CONNECTION_FACTORY}
        url = "amqp://localhost:5672"
        url = ${?RABBITMQ_URL}
        user = "guest"
        user = ${?RABBITMQ_USER}
        password = "guest"
        password = ${?RABBITMQ_PASSWORD}
        virtualHost = "/"
        virtualHost = ${?RABBITMQ_VPN}
    }
}

kafka {
    kafka {
        kafka.bootstrap.servers = "localhost:9092"
        kafka.bootstrap.servers = ${?KAFKA_BOOTSTRAP_SERVERS}
    }
}


datastax-java-driver.advanced.metadata.schema.refreshed-keyspaces = [ "/.*/" ]
